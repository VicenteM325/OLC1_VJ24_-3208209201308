package analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.TipoDato;
import excepciones.Errores;


//Instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;

//Expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.*;



// parser
parser code
{:
    scanner s;
    parser(scanner s) { this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();

    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
        System.out.println("Error Sintatico en la linea " +
        (s.left) + " y columna " + (s.right) + 
        " No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
        System.out.println("Error Sintactico no recuperable en la linea " + 
        (s.left) + " y columna " + (s.right) + 
        ". No se esperaba el componente: " + (s.value) + ".");
    }
:}

action code 
{:

:}

terminal String CADENA,ENTERO, DECIMAL, ID, CARACTER;
terminal FINCADENA, PRINTLN, INT, DOUBLE, STRING, CHAR, VAR, CONST;
terminal PAR_A, PAR_C, MAS, MENOS, MULTIPLICACION,DIVISION,POTENCIA, MODULO, UMENOS;
terminal MENOR_QUE, MAYOR_QUE, DIFEREN, MENOR_IGUAL_QUE, IGUALACION, MAYOR_IGUAL_QUE, IGUAL, DOS_PUNTOS;
terminal OR, AND, XOR, NOT;
terminal TRUE, FALSE, IF, BOOL;
terminal LLAVE1, LLAVE2;

nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION;
nonterminal Instruccion SIF;
nonterminal Tipo TIPOS;
nonterminal Instruccion EXPRESION;

precedence left OR, AND, XOR;
precedence left IGUALACION, DIFEREN, MENOR_IGUAL_QUE, MAYOR_IGUAL_QUE, MENOR_QUE, MAYOR_QUE;
precedence left MAS, MENOS;
precedence left MULTIPLICACION, DIVISION;
precedence left POTENCIA, MODULO;
precedence right NOT;
precedence right UMENOS;

start with INICIO;

INICIO ::= INSTRUCCIONES:a                                    {:  RESULT  = a;   :}
;
INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b             {:  RESULT = a; RESULT.add(b);  :}
                | INSTRUCCION:a                             {:  RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRESION:a                                       {: RESULT=a;  :}
               | DECLARACION:a                                    {: RESULT=a;  :}
               | ASIGNACION:a                                     {: RESULT=a;  :}
               | SIF:a                                            {: RESULT=a;  :}
               | error FINCADENA   
               | error
;

IMPRESION ::=  PRINTLN PAR_A EXPRESION:a PAR_C FINCADENA        {:  RESULT = new Print(a, aleft,aright); :}
;

DECLARACION ::= VAR ID:b DOS_PUNTOS TIPOS:a FINCADENA                             {:  RESULT = new Declaracion(b,a,true,aleft,aright); :}
            | CONST ID:b DOS_PUNTOS TIPOS:a FINCADENA                           {:  RESULT = new Declaracion(b,a,false,aleft,aright); :} 
            | VAR ID:b DOS_PUNTOS TIPOS:a IGUAL EXPRESION:c FINCADENA         {:  RESULT = new Declaracion(b,c,a,true,aleft,aright); :}
            | CONST ID:b DOS_PUNTOS TIPOS:a  IGUAL EXPRESION:c FINCADENA        {:  RESULT = new Declaracion(b,c,a,false,aleft,aright); :}
            
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA                 {:  RESULT= new AsignacionVar(a,b,aleft,aright);    :}
;

SIF        ::= IF PAR_A EXPRESION:a PAR_C LLAVE1 INSTRUCCIONES:b LLAVE2 {:  RESULT = new If(a,b, aleft, aright);  :}
;

TIPOS     ::= INT                                               {:  RESULT = new Tipo(TipoDato.ENTERO);  :}
            | DOUBLE                                            {:  RESULT = new Tipo(TipoDato.DECIMAL); :}
            | STRING                                            {:  RESULT = new Tipo(TipoDato.CADENA);  :}
            | BOOL                                              {:  RESULT = new Tipo(TipoDato.BOOLEANO);  :}
            | CHAR                                              {:  RESULT = new Tipo(TipoDato.CARACTER);  :}
;


EXPRESION ::= MENOS EXPRESION:a                                 {:   RESULT = new Aritmeticas(a,OperadoresAritmeticos.NEGACION, aleft, aright);      :}%prec UMENOS
            | DIFEREN EXPRESION:a                               {: RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright);                  :}%prec NOT
            | EXPRESION:a MAS EXPRESION:b                       {: RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.SUMA, aleft, aright);         :} 
            | EXPRESION:a MENOS EXPRESION:b                     {: RESULT = new Aritmeticas(a,b, OperadoresAritmeticos.RESTA, aleft, aright);        :}
            | EXPRESION:a MULTIPLICACION EXPRESION:b            {: RESULT = new Aritmeticas(a,b,OperadoresAritmeticos.MULTIPLICACION, aleft, aright);:} 
            | EXPRESION:a DIVISION EXPRESION:b                  {: RESULT = new Aritmeticas(a,b,OperadoresAritmeticos.DIVISION, aleft, aright);      :} 
            | EXPRESION:a POTENCIA EXPRESION:b                  {: RESULT = new Aritmeticas(a,b,OperadoresAritmeticos.POTENCIA, aleft, aright);      :} %prec POTENCIA
            | EXPRESION:a MODULO EXPRESION:b                    {: RESULT = new Aritmeticas(a,b,OperadoresAritmeticos.MODULO, aleft, aright);        :} %prec MODULO
            | EXPRESION:a IGUALACION EXPRESION:b                {: RESULT = new Relacionales(a,b,OperadoresRelacionales.IGUALACION, aleft, aright);  :}
            | EXPRESION:a DIFEREN EXPRESION:b                   {: RESULT = new Relacionales(a,b,OperadoresRelacionales.DIFEREN, aleft, aright);     :}
            | EXPRESION:a MENOR_IGUAL_QUE EXPRESION:b           {: RESULT = new Relacionales(a,b,OperadoresRelacionales.MENOR_IGUAL_QUE, aleft, aright);:}
            | EXPRESION:a MAYOR_IGUAL_QUE EXPRESION:b           {: RESULT = new Relacionales(a,b,OperadoresRelacionales.MAYOR_IGUAL_QUE, aleft, aright);:}
            | EXPRESION:a MENOR_QUE EXPRESION:b                 {: RESULT = new Relacionales(a,b,OperadoresRelacionales.MENOR_QUE, aleft, aright);    :}
            | EXPRESION:a MAYOR_QUE EXPRESION:b                 {: RESULT = new Relacionales(a,b,OperadoresRelacionales.MAYOR_QUE, aleft, aright);    :}
            | EXPRESION:a OR EXPRESION:b                        {: RESULT = new Logicos(a,b,OperadoresLogicos.OR, aleft, aright);                     :}
            | EXPRESION:a AND EXPRESION:b                       {: RESULT = new Logicos(a,b,OperadoresLogicos.AND, aleft, aright);                    :}
            | EXPRESION:a XOR EXPRESION:b                       {: RESULT = new Logicos(a,b,OperadoresLogicos.XOR, aleft, aright);                    :}
            | ENTERO:a                                          {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO),aleft, aright); :}
            | DECIMAL:a                                         {: RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright);     :}
            | CADENA:a                                          {: RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright);                  :}
            | TRUE:a                                            {: RESULT = new Nativo(true, new Tipo(TipoDato.BOOLEANO), aleft, aright );            :}
            | FALSE:a                                           {: RESULT = new Nativo(false, new Tipo(TipoDato.BOOLEANO), aleft, aright );           :}
            | CARACTER:a                                        {: RESULT = new Nativo(a.charAt(0), new Tipo(TipoDato.CARACTER), aleft, aright);                :}
            | ID:a                                              {: RESULT = new AccesoVar(a,aleft, aright);    :}
            | PAR_A EXPRESION:a PAR_C                           {: RESULT = a; :}
            
;           






